#include "apple.h"

#ifdef __APPLE__
#include <OpenGL/gl.h>
#include <GLUT/glut.h>
#else
#include <gl/glut.h>
#include <gl/gl.h>
#include <gl/glaux.h>
#endif

static double apple_vertices[][3] = {
    {0.173369, 1.181076, -0.127340},
    {0.137183, 0.869487, -0.091154},
    {-0.045126, 0.869487, -0.091154},
    {-0.081311, 1.181076, -0.127340},
    {0.173369, 1.181076, 0.127340},
    {0.137183, 0.869487, 0.091154},
    {-0.045126, 0.869487, 0.091154},
    {-0.081311, 1.181076, 0.127340},
    {-0.081311, 1.181076, 0.127340},
    {-0.045126, 0.869487, 0.091154},
    {0.137183, 0.869487, 0.091154},
    {0.173369, 1.181076, 0.127340},
    {-0.081311, 1.181076, -0.127340},
    {-0.045126, 0.869487, -0.091154},
    {0.137183, 0.869487, -0.091154},
    {0.173369, 1.181076, -0.127340},
    {0.100535, 0.150772, -0.054506},
    {-0.008478, 0.150772, -0.054506},
    {0.100535, 0.150772, 0.054506},
    {-0.008478, 0.150772, 0.054506},
    {-0.008478, 0.150772, 0.054506},
    {0.100535, 0.150772, 0.054506},
    {-0.008478, 0.150772, -0.054506},
    {0.100535, 0.150772, -0.054506},
    {0.454144, 1.724214, -0.127340},
    {0.199463, 1.724214, -0.127340},
    {0.454144, 1.724214, 0.127340},
    {0.199463, 1.724214, 0.127340},
    {0.199463, 1.724214, 0.127340},
    {0.454144, 1.724214, 0.127340},
    {0.199463, 1.724214, -0.127340},
    {0.454144, 1.724214, -0.127340},
    {0.612863, -1.152296, 0.632179},
    {0.743649, 0.987621, -0.522970},
    {-0.582655, -0.694472, -1.135406},
    {0.026566, -0.205335, 0.133828},
    {1.124008, 0.820055, 0.177048},
    {-0.117629, 0.112455, 0.079459},
    {-0.316840, 0.616849, 1.222772},
    {0.755570, -0.522189, -1.122111},
    {0.492383, 0.814292, -0.166743},
    {-0.640699, -1.203262, -0.501468},
    {-1.073635, 0.837779, 0.173345},
    {-1.284143, -0.391451, -0.563022},
    {-0.451730, 0.692866, -1.204750},
    {0.460088, 0.592493, 0.303505},
    {0.104202, -0.603311, -1.304743},
    {-0.052010, -0.468661, 1.362683},
    {1.114567, -0.913034, -0.213180},
    {-0.733241, -0.317132, 1.218191},
    {0.878122, 0.060027, -1.156769},
    {-0.327222, -0.088267, -1.388059},
    {-0.070579, 0.957277, -0.579538},
    {-0.673208, -1.259015, 0.070286},
    {1.328857, 0.423948, 0.423667},
    {-1.398269, -0.165739, 0.409764},
    {-0.283960, -0.921210, 1.066965},
    {-1.083760, 0.396848, -0.867649},
    {-0.728279, 0.899891, -0.040576},
    {-0.000276, -1.438856, 0.071436},
    {0.743952, -0.640232, 1.048716},
    {1.248154, -0.381439, 0.632179},
    {1.411154, -0.280980, 0.071436},
    {-1.279850, 0.573687, -0.344243},
    {-0.830050, -1.007176, 0.632178},
    {0.350727, -0.117676, 1.390350},
    {-0.608981, 1.000835, -0.714617},
    {-0.030394, -1.255916, -0.750910},
    {1.327664, -0.262188, -0.488127},
    {0.022966, -1.157951, 0.909452},
    {0.142381, 0.655271, -1.274282},
    {-0.112446, 0.183528, 1.414616},
    {0.680323, -1.270060, -0.213180},
    {-1.276638, 0.572698, 0.415582},
    {0.140024, 0.097694, -1.423798},
    {0.912162, 0.061879, 1.118921},
    {-0.461056, 0.744145, 0.549443},
    {0.606252, 0.808196, 0.611230},
    {0.433523, -0.985175, -0.943546},
    {0.649322, 0.747754, 0.979401},
    {-0.065521, 0.754536, 0.810707},
    {-0.839466, 0.290656, 1.143949},
    {1.223125, 0.476964, -0.632481},
    {0.536335, 0.882549, -1.011738},
    {0.351022, 0.554059, 1.265792},
    {-0.831751, -0.110407, -1.161625},
    {-1.196519, -0.799157, 0.071435},
    {-0.628753, 0.795018, 0.854565},
};
static int n_apple_vertices = sizeof(apple_vertices) / sizeof(float[3]);


static double apple_normals[][3] = {
	{-0.470412, 0.172484, 0.498331},
	{-0.498007, 0.083142, 0.498007},
	{0.498007, 0.083141, 0.498007},
	{0.470412, -0.057126, 0.498331},
	{-0.470412, 0.172484, -0.498331},
	{-0.498007, 0.083142, -0.498007},
	{0.498007, 0.083141, -0.498007},
	{0.470412, -0.057126, -0.498331},
	{0.470412, -0.057126, -0.498331},
	{0.498007, 0.083141, -0.498007},
	{-0.498007, 0.083142, -0.498007},
	{-0.470412, 0.172484, -0.498331},
	{0.470412, -0.057126, 0.498331},
	{0.498007, 0.083141, 0.498007},
	{-0.498007, 0.083142, 0.498007},
	{-0.470412, 0.172484, 0.498331},
	{-0.332901, 0.367283, 0.332901},
	{0.332901, 0.367283, 0.332901},
	{-0.332901, 0.367283, -0.332901},
	{0.332901, 0.367283, -0.332901},
	{0.332901, 0.367283, -0.332901},
	{-0.332901, 0.367283, -0.332901},
	{0.332606, 0.367003, 0.332606},
	{-0.333491, 0.367003, 0.332606},
	{-0.296681, -0.180783, 0.333038},
	{0.295797, -0.487064, 0.333038},
	{-0.296681, -0.180783, -0.333923},
	{0.295797, -0.487064, -0.333923},
	{0.295797, -0.487064, -0.333923},
	{-0.296681, -0.180783, -0.333923},
	{0.295797, -0.487064, 0.333038},
	{-0.296681, -0.180783, 0.333038},
	{-0.472551, 0.743344, -0.342446},
	{0.035394, -0.749038, -0.036288},
	{0.388895, 0.458411, 0.729754},
	{-0.011860, -0.417496, 0.042058},
	{-0.494305, -0.738892, -0.096827},
	{-0.248728, -0.488872, -0.343462},
	{0.151480, -0.589079, -0.707493},
	{-0.504880, 0.346191, 0.714656},
	{0.385727, -0.539358, -0.320012},
	{0.464720, 0.760521, 0.305690},
	{0.420792, -0.826352, -0.097391},
	{0.819308, 0.239860, 0.374090},
	{0.264478, -0.432009, 0.768932},
	{0.496574, -0.643237, 0.126384},
	{-0.057108, 0.407923, 0.865013},
	{0.002453, 0.340945, -0.896707},
	{-0.724498, 0.567324, 0.144367},
	{0.474819, 0.235867, -0.775557},
	{-0.545826, -0.103554, 0.761874},
	{0.230909, 0.066866, 0.936201},
	{-0.110625, -0.817405, -0.276769},
	{0.415488, 0.854299, -0.115813},
	{-0.839139, -0.269322, -0.284524},
	{0.872249, 0.118097, -0.274825},
	{0.265384, 0.568547, -0.738154},
	{0.693127, -0.295657, 0.563355},
	{-0.258107, -0.827990, -0.160222},
	{0.011443, 0.947513, -0.040729},
	{-0.443128, 0.422592, -0.736972},
	{-0.796717, 0.309260, -0.400837},
	{-0.942349, 0.119170, -0.011663},
	{0.821481, -0.383982, 0.184323},
	{0.546005, 0.627754, -0.441551},
	{-0.260135, 0.061573, -0.923610},
	{0.261557, -0.830175, 0.210804},
	{0.009572, 0.797182, 0.499439},
	{-0.850114, 0.178260, 0.389211},
	{0.017544, 0.749728, -0.551148},
	{-0.153657, -0.397996, 0.841371},
	{0.120565, -0.119616, -0.951690},
	{-0.390279, 0.839979, 0.160179},
	{0.742839, -0.447488, -0.304088},
	{-0.116770, -0.039482, 0.949953},
	{-0.599973, -0.089039, -0.729877},
	{-0.519922, -0.691088, 0.177924},
	{0.168211, -0.872957, 0.002981},
	{-0.368628, 0.662686, 0.591609},
	{-0.251976, -0.751820, -0.373280},
	{0.036376, -0.798557, 0.344480},
	{0.548932, -0.257428, -0.712774},
	{-0.803232, -0.349286, 0.310285},
	{-0.230426, -0.707112, 0.484304},
	{-0.217377, -0.382153, -0.832565},
	{0.560875, 0.041425, 0.778017},
	{0.764082, 0.566032, -0.013909},
	{0.146199, -0.835165, -0.242871},
};

static int apple_faces[] = {
4, 0, 1, 2, 3, 
4, 4, 7, 6, 5, 
4, 0, 4, 5, 1, 
4, 2, 6, 7, 3, 
4, 13, 12, 15, 14, 
4, 11, 8, 9, 10, 
4, 15, 11, 10, 14, 
4, 13, 9, 8, 12, 
4, 9, 13, 17, 19, 
4, 14, 10, 18, 16, 
4, 10, 9, 19, 18, 
4, 13, 14, 16, 17, 
4, 6, 2, 22, 20, 
4, 1, 5, 21, 23, 
4, 5, 6, 20, 21, 
4, 2, 1, 23, 22, 
4, 23, 21, 20, 22, 
4, 16, 18, 19, 17, 
4, 12, 8, 27, 25, 
4, 11, 15, 24, 26, 
4, 8, 11, 26, 27, 
4, 15, 12, 25, 24, 
4, 3, 7, 28, 30, 
4, 4, 0, 31, 29, 
4, 7, 4, 29, 28, 
4, 0, 3, 30, 31, 
4, 29, 31, 30, 28, 
4, 25, 27, 26, 24, 
3, 33, 52, 37, 
3, 39, 68, 48, 
3, 41, 59, 53, 
3, 61, 32, 48, 
3, 64, 56, 49, 
3, 66, 42, 58, 
3, 81, 49, 71, 
3, 63, 43, 55, 
3, 87, 73, 81, 
3, 59, 32, 69, 
3, 42, 73, 87, 
3, 32, 60, 69, 
3, 49, 56, 47, 
3, 48, 32, 72, 
3, 43, 41, 86, 
3, 78, 48, 72, 
3, 50, 83, 82, 
3, 36, 33, 77, 
3, 46, 74, 39, 
3, 50, 82, 68, 
3, 83, 44, 66, 
3, 40, 37, 35, 
3, 32, 61, 60, 
3, 41, 53, 86, 
3, 50, 70, 83, 
3, 78, 72, 67, 
3, 58, 42, 87, 
3, 68, 82, 62, 
3, 52, 58, 37, 
3, 87, 38, 79, 
3, 62, 82, 54, 
3, 44, 57, 66, 
3, 80, 76, 87, 
3, 73, 55, 81, 
3, 84, 71, 65, 
3, 62, 54, 61, 
3, 45, 35, 80, 
3, 64, 69, 56, 
3, 33, 40, 45, 
3, 72, 32, 59, 
3, 54, 79, 75, 
3, 69, 60, 47, 
3, 52, 66, 58, 
3, 61, 54, 75, 
3, 83, 66, 52, 
3, 46, 39, 78, 
3, 75, 79, 84, 
3, 80, 87, 79, 
3, 75, 84, 65, 
3, 40, 35, 45, 
3, 85, 43, 57, 
3, 66, 57, 63, 
3, 87, 81, 38, 
3, 74, 46, 51, 
3, 84, 38, 71, 
3, 48, 62, 61, 
3, 83, 52, 33, 
3, 86, 64, 55, 
3, 41, 67, 59, 
3, 33, 45, 77, 
3, 74, 51, 44, 
3, 67, 72, 59, 
3, 44, 85, 57, 
3, 43, 86, 55, 
3, 82, 36, 54, 
3, 82, 33, 36, 
3, 74, 70, 50, 
3, 38, 81, 71, 
3, 35, 76, 80, 
3, 36, 77, 79, 
3, 67, 46, 78, 
3, 63, 55, 73, 
3, 49, 47, 71, 
3, 56, 69, 47, 
3, 74, 44, 70, 
3, 83, 33, 82, 
3, 55, 64, 49, 
3, 74, 50, 39, 
3, 53, 59, 69, 
3, 47, 65, 71, 
3, 37, 58, 76, 
3, 79, 77, 80, 
3, 78, 39, 48, 
3, 51, 46, 34, 
3, 55, 49, 81, 
3, 61, 75, 60, 
3, 34, 67, 41, 
3, 86, 53, 64, 
3, 60, 65, 47, 
3, 48, 68, 62, 
3, 63, 73, 42, 
3, 54, 36, 79, 
3, 35, 37, 76, 
3, 57, 43, 63, 
3, 66, 63, 42, 
3, 39, 50, 68, 
3, 33, 37, 40, 
3, 70, 44, 83, 
3, 53, 69, 64, 
3, 45, 80, 77, 
3, 34, 46, 67, 
3, 58, 87, 76, 
3, 79, 38, 84, 
3, 60, 75, 65, 
3, 34, 41, 43, 
3, 44, 51, 85, 
3, 85, 34, 43, 
3, 51, 34, 85, 
};

static int apple_faces_size = sizeof (apple_faces) / sizeof (int);

double scale_x, scale_y, scale_z;
double translate_x, translate_y, translate_z;

void drawApple()
{
	glTranslated(translate_x, translate_y, translate_z);
	glScaled(scale_x, scale_y, scale_z);
	int i = 0;
	int* p = apple_faces;
	while (i < apple_faces_size)
	{
		int n_edges = *p;
		glDrawElements(GL_POLYGON, n_edges, GL_UNSIGNED_INT, p+1);

		p += n_edges+1;
		i += n_edges+1;
	}
}

void initApple()
{
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_NORMAL_ARRAY);

	glVertexPointer(3, GL_DOUBLE, 0, apple_vertices);
	glNormalPointer(GL_DOUBLE, 0, apple_normals); 

	// normalize apple
	for (int k =0; k < (n_apple_vertices-1)/2+1; ++k)
	{
		apple_normals[k][0] *= -1;
		apple_normals[k][1] *= -1;
		apple_normals[k][2] *= -1;
	}

	double min_x = apple_vertices[0][0];
	double max_x = apple_vertices[0][0];
	double min_y = apple_vertices[0][1];
	double max_y = apple_vertices[0][1];
	double min_z = apple_vertices[0][2];
	double max_z = apple_vertices[0][2];
	for (int i = 1; i < n_apple_vertices; ++i)
	{
		if (apple_vertices[i][0] < min_x)
			min_x = apple_vertices[i][0];
		if (apple_vertices[i][0] > max_x)
			max_x = apple_vertices[i][0];

		if (apple_vertices[i][1] < min_y)
			min_y = apple_vertices[i][1];
		if (apple_vertices[i][1] > max_y)
			max_y = apple_vertices[i][1];

		if (apple_vertices[i][2] < min_z)
			min_z = apple_vertices[i][2];
		if (apple_vertices[i][2] > max_z)
			max_z = apple_vertices[i][2];
	}

	scale_x = 1.0 / (max_x - min_x);
	scale_y = 1.0 / (max_y - min_y);
	scale_z = 1.0 / (max_z - min_z);

	translate_x = - (max_x + min_x) / 2.0 + 0.5;
	translate_y = - (max_y + min_y) / 2.0 + 0.5;
	translate_z = - (max_z + min_z) / 2.0 + 0.5;
}